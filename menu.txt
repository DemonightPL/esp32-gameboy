#include <SPI.h>
#include <SD.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Update.h>

// Define SD card connection pins
#define SD_CS    4  // D8
#define SD_MOSI  5  // D7
#define SD_MISO  6  // D6
#define SD_SCLK  7  // D5

// Define OLED screen connection pins
#define OLED_SDA 18
#define OLED_SCL 8

// Define button pins
#define BUTTON_UP    45
#define BUTTON_DOWN  21
#define BUTTON_SELECT 38

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

File root;
String files[10]; // Assuming a max of 10 scripts for simplicity
int fileCount = 0;
int selectedFile = 0;

void setup() {
  Serial.begin(115200);
  delay(10000); // Give some time for the Serial Monitor to start

  // Initialize OLED display
  Wire.begin(OLED_SDA, OLED_SCL);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();
  display.display();

  // Initialize buttons
  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_SELECT, INPUT_PULLUP);

  // Initialize SD card
  SPI.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);

  bool sdInitialized = false;
  for (int attempt = 0; attempt < 3; attempt++) {
    if (SD.begin(SD_CS)) {
      sdInitialized = true;
      break;
    }
    Serial.println("SD card initialization failed! Retrying...");
    delay(1000);
  }

  if (!sdInitialized) {
    Serial.println("SD card initialization failed after 3 attempts!");
    while (1);
  }

  // List files in root directory
  root = SD.open("/");
  listFiles(root);
  root.close();

  // Show the menu
  showMenu();

  // Change state to "menu"
  changeStateToMenu();
}

void loop() {
  if (!digitalRead(BUTTON_UP)) {
    selectedFile = (selectedFile - 1 + fileCount) % fileCount;
    showMenu();
    delay(200); // Debounce delay
  }
  
  if (!digitalRead(BUTTON_DOWN)) {
    selectedFile = (selectedFile + 1) % fileCount;
    showMenu();
    delay(200); // Debounce delay
  }

  if (!digitalRead(BUTTON_SELECT)) {
    flashWithScript(files[selectedFile]);
    delay(200); // Debounce delay
  }
}

void listFiles(File dir) {
  fileCount = 0;
  while (true) {
    File entry = dir.openNextFile();
    if (!entry) {
      // no more files
      break;
    }
    if (!entry.isDirectory() && String(entry.name()).endsWith(".bin") && String(entry.name()) != ("menu.bin") ) {
      files[fileCount++] = String(entry.name());
    }
    entry.close();
  }
}

void showMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  for (int i = 0; i < fileCount; i++) {
    if (i == selectedFile) {
      display.setCursor(0, i * 10);
      display.print(">");
    }
    display.setCursor(10, i * 10);
    display.print(files[i]);
  }
  display.display();
}

void flashWithScript(String filename) {
  File updateBin = SD.open("/" + filename);
  if (!updateBin) {
    Serial.println("Failed to open file for reading");
    return;
  }

  size_t updateSize = updateBin.size();

  if (Update.begin(updateSize)) {
    Serial.println("Starting update");
    size_t written = Update.writeStream(updateBin);

    if (written == updateSize) {
      Serial.println("Written : " + String(written) + " successfully");
    } else {
      Serial.println("Written only : " + String(written) + "/" + String(updateSize) + ". Retry?");
    }

    if (Update.end()) {
      Serial.println("OTA done!");
      if (Update.isFinished()) {
        Serial.println("Update successfully completed. Rebooting.");
        ESP.restart();
      } else {
        Serial.println("Update not finished? Something went wrong!");
      }
    } else {
      Serial.println("Error Occurred. Error #: " + String(Update.getError()));
    }
  } else {
    Serial.println("Not enough space to begin OTA");
  }

  updateBin.close();
}

void changeStateToMenu() {
  File stateFile = SD.open("/state.txt", FILE_WRITE);
  if (!stateFile) {
    Serial.println("Failed to open state file for writing");
    return;
  }
  stateFile.println("menu");
  stateFile.close();
  Serial.println("State set to 'menu'");
}

